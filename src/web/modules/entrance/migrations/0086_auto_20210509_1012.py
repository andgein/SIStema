# Generated by Django 2.2.10 on 2021-05-09 10:12
import sys

from django.db import migrations, models
import django.db.models.deletion


def make_key_dates(apps, _schema_editor):
    EntranceExam = apps.get_model('entrance', 'EntranceExam')
    KeyDate = apps.get_model('dates', 'KeyDate')
    for exam in EntranceExam.objects.all():
        if exam.close_time is not None:
            exam.close_date = KeyDate.objects.create(
                datetime=exam.close_time,
                name='Окончание вступительной работы для "{}" [авто-создано, удалить при возможности]'.format(exam.school.name),
            )
            exam.save()


def make_key_dates_reverse(apps, _schema_editor):
    EntranceExam = apps.get_model('entrance', 'EntranceExam')
    for exam in EntranceExam.objects.all():
        if exam.close_date is not None:
            exam.close_time = exam.close_date.datetime
            exam.save()


def create_limiters(apps, _schema_editor):
    School = apps.get_model('schools', 'School')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    limiter_models = [
        apps.get_model('entrance', 'AlreadyWasEntranceLevelLimiter'),
        apps.get_model('entrance', 'AgeEntranceLevelLimiter'),
        apps.get_model('entrance', 'EnrollmentTypeEntranceLevelLimiter'),
    ]
    for school in School.objects.all():
        if not hasattr(school, 'entrance_exam'):
            continue
        for limiter_model in limiter_models:
            content_type = ContentType.objects.get_for_model(limiter_model)
            limiter_model.objects.get_or_create(school=school, polymorphic_ctype=content_type)


def create_already_was_limits(apps, _schema_editor):
    School = apps.get_model('schools', 'School')
    EntranceLevel = apps.get_model('entrance', 'EntranceLevel')
    AlreadyWasEntranceLevelLimiter = apps.get_model('entrance', 'AlreadyWasEntranceLevelLimiter')
    AlreadyWasEntranceLevelLimiterForParallel = apps.get_model('entrance', 'AlreadyWasEntranceLevelLimiterForParallel')

    limit_for_parallel = {
        'a': 'a',
        'a0': 'a',
        'a_ml': 'a',
        'a_prime': 'a',
        'aa': 'a',
        'as': 'a',
        'ay': 'a',
        'b': 'a_prime',
        'b_prime': 'b',
        'c': 'b_prime',
        'c.cpp': 'b_prime',
        'c.python': 'b_prime',
        'c_prime': 'c',
        'd': 'c_prime',
    }

    for school in School.objects.all():
        limiter = AlreadyWasEntranceLevelLimiter.objects.filter(school=school).first()
        if limiter is None:
            continue

        for previous_parallel, entrance_level_short_name in limit_for_parallel.items():
            level = EntranceLevel.objects.filter(school=school, short_name=entrance_level_short_name).first()
            if level is None:
                print("Level {} not found for school {}".format(entrance_level_short_name, school.name), file=sys.stderr)
                continue
            AlreadyWasEntranceLevelLimiterForParallel.objects.get_or_create(
                limiter=limiter,
                previous_parallel_short_name=previous_parallel,
                level=level
            )


def create_age_limits(apps, _schema_editor):
    School = apps.get_model('schools', 'School')
    EntranceLevel = apps.get_model('entrance', 'EntranceLevel')
    AgeEntranceLevelLimiter = apps.get_model('entrance', 'AgeEntranceLevelLimiter')
    AgeEntranceLevelLimiterForClass = apps.get_model('entrance', 'AgeEntranceLevelLimiterForClass')

    limit_for_class = {
        10: 'b_prime',
        9: 'c',
        8: 'c_prime',
    }

    for school in School.objects.all():
        limiter = AgeEntranceLevelLimiter.objects.filter(school=school).first()
        if limiter is None:
            continue

        for current_class, entrance_level_short_name in limit_for_class.items():
            level = EntranceLevel.objects.filter(school=school, short_name=entrance_level_short_name).first()
            if level is None:
                print("Level {} not found for school {}".format(entrance_level_short_name, school.name), file=sys.stderr)
                continue
            AgeEntranceLevelLimiterForClass.objects.get_or_create(
                limiter=limiter,
                current_class=current_class,
                level=level
            )


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('schools', '0018_auto_20180407_1742'),
        ('dates', '0008_auto_20180510_2140'),
        ('entrance', '0085_auto_20200212_0647'),
    ]

    operations = [
        migrations.CreateModel(
            name='EntranceLevelLimiter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_entrance.entrancelevellimiter_set+', to='contenttypes.ContentType')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entrance_level_limiters', to='schools.School')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.AddField(
            model_name='entranceexam',
            name='can_participant_select_entrance_level',
            field=models.BooleanField(default=False, help_text='Может ли школьник выбрать себе уровень вступительной работы. Если True, тошкольнику будет предоставлен выбор, начиная с минимального уровня, на который он может претендовать. Если False, то уровень выдаётся автоматически на основе тематической анкеты и других параметров. При решении определённых задач школьник может поднять себе уровень.'),
        ),
        migrations.AddField(
            model_name='entranceexam',
            name='close_date',
            field=models.ForeignKey(blank=True, default=None, help_text='Время окончания экзамена', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='dates.KeyDate'),
        ),
        migrations.RunPython(
            code=make_key_dates,
            reverse_code=make_key_dates_reverse,
        ),
        migrations.RemoveField(
            model_name='entranceexam',
            name='close_time',
        ),
        migrations.CreateModel(
            name='AgeEntranceLevelLimiter',
            fields=[
                ('entrancelevellimiter_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entrance.EntranceLevelLimiter')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('entrance.entrancelevellimiter',),
        ),
        migrations.CreateModel(
            name='AlreadyWasEntranceLevelLimiter',
            fields=[
                ('entrancelevellimiter_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entrance.EntranceLevelLimiter')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('entrance.entrancelevellimiter',),
        ),
        migrations.CreateModel(
            name='EnrollmentTypeEntranceLevelLimiter',
            fields=[
                ('entrancelevellimiter_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entrance.EntranceLevelLimiter')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('entrance.entrancelevellimiter',),
        ),
        migrations.CreateModel(
            name='AgeEntranceLevelLimiterForClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_class', models.IntegerField(help_text='Текущий класс школьника (например, если тут указан 8 класс, то уровень будет применяться как ограничения для всех, кто в 8 классе и старше)')),
                ('level', models.ForeignKey(help_text='Какой уровень вступительной для такого школьника будет минимальным', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='entrance.EntranceLevel')),
                ('limiter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='limits_for_classes', to='entrance.AgeEntranceLevelLimiter')),
            ],
        ),
        migrations.CreateModel(
            name='AlreadyWasEntranceLevelLimiterForParallel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('previous_parallel_short_name', models.CharField(blank=True, default='', help_text='short_name параллели, в которой был школьник. Укажите это поле или previous_parallel.', max_length=100)),
                ('level', models.ForeignKey(help_text='Какой уровень вступительной для такого школьника будет минимальным', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='entrance.EntranceLevel')),
                ('previous_parallel', models.ForeignKey(blank=True, default=None, help_text='Параллель, в которой был школьник. Укажите это поле или previous_parallel_short_name', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='schools.Parallel')),
                ('limiter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='limits_for_parallels', to='entrance.AlreadyWasEntranceLevelLimiter')),
            ],
            options={
                'unique_together': {('limiter', 'previous_parallel')},
            },
        ),
        migrations.RunPython(
            code=create_limiters,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunPython(
            code=create_already_was_limits,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunPython(
            code=create_age_limits,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
