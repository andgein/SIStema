# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-03-08 08:33
from __future__ import unicode_literals

from django.conf import settings
from django.apps import apps as global_apps
from django.db import migrations

import sys
import datetime


class SocialAccountsConverter:
    SiteModel = None
    OldSocialModel = None
    SocialAppModel = None
    SocialAccountModel = None
    SocialTokenModel = None
    social_apps = None

    _already_converted_accounts = 0

    def _account_was_converted(self, old_account, social_app):
        if self.SocialAccountModel.objects.filter(user=old_account.user,
                                                  provider=social_app.provider,
                                                  uid=old_account.uid
                                                  ).exists():
            self._already_converted_accounts += 1
            return True

        return False

    def _convert_vk_account(self, old_account, social_app):
        if self._account_was_converted(old_account, social_app):
            return
        social_account = self.SocialAccountModel.objects.create(
            user=old_account.user,
            provider=social_app.provider,
            uid=old_account.uid,
            extra_data={})
        try:
            expires_at = int(old_account.extra_data['auth_time']) + int(old_account.extra_data['expires'])
        except KeyError:
            expires_at = 0
            sys.stderr.write("can not get expires_at for (acc.id %d uid %s provider %s)\n"
                             % (old_account.id, old_account.uid, old_account.provider))
        self.SocialTokenModel.objects.create(
            app=social_app,
            account=social_account,
            token=old_account.extra_data['access_token'],
            token_secret='',
            expires_at=datetime.datetime.fromtimestamp(expires_at, datetime.timezone.utc))

    def _convert_twitter_account(self, old_account, social_app):
        if self._account_was_converted(old_account, social_app):
            return
        social_account = self.SocialAccountModel.objects.create(
            user=old_account.user,
            provider=social_app.provider,
            uid=old_account.uid,
            extra_data={})
        try:
            expires_at = int(old_account.extra_data['auth_time']) + int(
                old_account.extra_data['access_token']['x_auth_expires'])
        except KeyError:
            expires_at = 0
            sys.stderr.write("can not get expires_at for (acc.id %d uid %s provider %s)\n"
                             % (old_account.id, old_account.uid, old_account.provider))
        self.SocialTokenModel.objects.create(
            app=social_app,
            account=social_account,
            token=old_account.extra_data['access_token']['oauth_token'],
            token_secret=old_account.extra_data['access_token']['oauth_token_secret'],
            expires_at=datetime.datetime.fromtimestamp(expires_at, datetime.timezone.utc))

    def _convert_account(self, old_account):
        if not old_account.user.is_active:
            return  # there is no reason to save connection with deactivated account
        if old_account.provider == 'vk-oauth2':
            self._convert_vk_account(old_account, self.social_apps['vk'])
        elif old_account.provider == 'twitter':
            self._convert_twitter_account(old_account, self.social_apps['twitter'])
        else:
            raise NotImplementedError("Unknown provider '%s'" % old_account.provider)

    def _get_or_create_social_app(self, provider, client_id, secret_key):
        apps = self.SocialAppModel.objects.filter(provider=provider)
        if apps.exists():
            # TODO check sites contains settings.SITE_ID?
            sys.stderr.write('SocialApp with provider %s already exists\n' % provider)
            return apps.first()
        social_app = self.SocialAppModel.objects.create(
            provider=provider,
            name=provider,
            client_id=client_id,
            secret=secret_key,
        )
        social_app.sites.add(settings.SITE_ID)
        return social_app

    def convert_all(self, apps, schema_editor):
        if not apps.is_installed('sites'):
            return
        if not apps.is_installed('social_django'):
            return
        if not apps.is_installed('socialaccount'):
            return

        self.SiteModel = apps.get_model('sites', 'Site')
        self.OldSocialModel = apps.get_model('social_django', 'UserSocialAuth')
        self.SocialAppModel = apps.get_model('socialaccount', 'SocialApp')
        self.SocialAccountModel = apps.get_model('socialaccount', 'SocialAccount')
        self.SocialTokenModel = apps.get_model('socialaccount', 'SocialToken')

        self.SiteModel.objects.update_or_create(id=settings.SITE_ID,
                                                defaults={'domain': 'sistema.lksh.ru',
                                                          'name': 'SIStema'})

        self.social_apps = {
            'vk': self._get_or_create_social_app(
                'vk',
                settings.SOCIAL_AUTH_VK_OAUTH2_KEY,
                settings.SOCIAL_AUTH_VK_OAUTH2_SECRET
            ),
            'twitter': self._get_or_create_social_app(
                'twitter',
                settings.SOCIAL_AUTH_TWITTER_KEY,
                settings.SOCIAL_AUTH_TWITTER_SECRET
            ),
        }

        for old_account in self.OldSocialModel.objects.all():
            self._convert_account(old_account)
        sys.stderr.write('%d accounts have already been converted\n' % self._already_converted_accounts)

    @classmethod
    def as_callable(cls):
        def func(*args, **kwargs):
            cls().convert_all(*args, **kwargs)

        return func


class Migration(migrations.Migration):
    operations = [
        migrations.RunPython(SocialAccountsConverter.as_callable(), migrations.RunPython.noop),
    ]

    dependencies = [
        ('users', '0008_generate_account_emailaddress'),
    ]

    if global_apps.is_installed('django.contrib.sites'):
        dependencies.append(('sites', '0002_alter_domain_unique'))

    if global_apps.is_installed('social_django'):
        dependencies.append(('social_django', '0006_partial'))

    if global_apps.is_installed('allauth.socialaccount'):
        dependencies.append(('socialaccount', '0003_extra_data_default_dict'))
