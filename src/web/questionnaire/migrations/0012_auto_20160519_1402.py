# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-05-19 11:02
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
from django.db.migrations.operations.special import RunPython

# It's very difficult migration. Be careful

questions = {}
question_models = [
    'ChoiceQuestionnaireQuestion',
    'TextQuestionnaireQuestion',
    'YesNoQuestionnaireQuestion',
    'DateQuestionnaireQuestion'
]


def save_questions_and_delete(apps, schema):
    global questions, question_models

    for model in question_models:
        qs = apps.get_model('questionnaire', model).objects.all()
        questions[model] = list(qs)
        if model == 'ChoiceQuestionnaireQuestion':
            for instance in questions[model]:
                instance.all_variants = list(instance.variants.all())
        qs.delete()


def restore_questions(apps, schema):
    global questions, question_models

    import questionnaire.models

    for model_name in question_models:
        klass = getattr(questionnaire.models, model_name)
        for instance in questions[model_name]:
            instance_dict = instance.__dict__
            del instance_dict['id']
            del instance_dict['_state']
            print('Add', instance_dict)

            if model_name == 'ChoiceQuestionnaireQuestion':
                variants = instance_dict['all_variants']
                del instance_dict['all_variants']

            question = klass(**instance_dict)
            question.save()

            # For choice questions we need to return all variants
            if model_name == 'ChoiceQuestionnaireQuestion':
                for variant in variants:
                    variant_class = getattr(questionnaire.models, 'ChoiceQuestionnaireQuestionVariant')
                    variant_dict = variant.__dict__
                    del variant_dict['_state']
                    del variant_dict['_question_cache']
                    variant_dict['question_id'] = question.id
                    variant_class(**variant_dict).save()


def backwards(apps, schema):
    pass


class Migration(migrations.Migration):
    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('questionnaire', '0011_auto_20160515_2339'),
    ]
    operations = [
        RunPython(save_questions_and_delete, backwards),

        migrations.CreateModel(
            name='AbstractQuestionnaireBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(
                    help_text='Используется в урлах. Лучше обойтись латинскими буквами, цифрами и подчёркиванием',
                    max_length=100)),
                ('order', models.IntegerField(default=0, help_text='Блоки выстраиваются по возрастанию порядка')),
            ],
            options={
                'ordering': ('questionnaire_id', 'order'),
            },
        ),
        migrations.CreateModel(
            name='AbstractQuestionnaireQuestion',
            fields=[
                ('abstractquestionnaireblock_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False,
                                      to='questionnaire.AbstractQuestionnaireBlock')),
                ('text', models.TextField(help_text='Вопрос')),
                ('is_required', models.BooleanField(help_text='Является ли вопрос обязательным')),
                ('help_text',
                 models.CharField(blank=True, help_text='Подсказка, помогающая ответить на вопрос', max_length=400)),
            ],
            options={
                'abstract': False,
            },
            bases=('questionnaire.abstractquestionnaireblock',),
        ),
        migrations.CreateModel(
            name='QuestionnaireBlockShowCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='choicequestionnairequestion',
            unique_together=set([]),
        ),
        migrations.AlterUniqueTogether(
            name='datequestionnairequestion',
            unique_together=set([]),
        ),
        migrations.AlterUniqueTogether(
            name='textquestionnairequestion',
            unique_together=set([]),
        ),
        migrations.AlterUniqueTogether(
            name='yesnoquestionnairequestion',
            unique_together=set([]),
        ),
        migrations.CreateModel(
            name='MarkdownQuestionnaireBlock',
            fields=[
                ('abstractquestionnaireblock_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False,
                                      to='questionnaire.AbstractQuestionnaireBlock')),
                ('markdown', models.TextField()),
            ],
            options={
                'abstract': False,
            },
            bases=('questionnaire.abstractquestionnaireblock',),
        ),
        # Drop variant's id because it's a foreign key to follow deleted question id
        migrations.RemoveField(
            model_name='choicequestionnairequestionvariant',
            name='question_id',
        ),
        migrations.RemoveField(
            model_name='choicequestionnairequestion',
            name='id',
        ),
        migrations.RemoveField(
            model_name='datequestionnairequestion',
            name='id',
        ),
        migrations.RemoveField(
            model_name='yesnoquestionnairequestion',
            name='id',
        ),
        migrations.RemoveField(
            model_name='textquestionnairequestion',
            name='id',
        ),
        migrations.AddField(
            model_name='questionnaireblockshowcondition',
            name='block',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='show_conditions',
                                    to='questionnaire.AbstractQuestionnaireBlock'),
        ),
        migrations.AddField(
            model_name='questionnaireblockshowcondition',
            name='need_to_be_checked',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+',
                                    to='questionnaire.ChoiceQuestionnaireQuestionVariant'),
        ),
        migrations.AddField(
            model_name='abstractquestionnaireblock',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='polymorphic_questionnaire.abstractquestionnaireblock_set+',
                                    to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='abstractquestionnaireblock',
            name='questionnaire',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='questionnaire.Questionnaire'),
        ),
        migrations.AddField(
            model_name='choicequestionnairequestion',
            name='abstractquestionnairequestion_ptr',
            field=models.OneToOneField(auto_created=True, default=None, on_delete=django.db.models.deletion.CASCADE,
                                       parent_link=True, primary_key=True, serialize=False,
                                       to='questionnaire.AbstractQuestionnaireQuestion'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='datequestionnairequestion',
            name='abstractquestionnairequestion_ptr',
            field=models.OneToOneField(auto_created=True, default=None, on_delete=django.db.models.deletion.CASCADE,
                                       parent_link=True, primary_key=True, serialize=False,
                                       to='questionnaire.AbstractQuestionnaireQuestion'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='textquestionnairequestion',
            name='abstractquestionnairequestion_ptr',
            field=models.OneToOneField(auto_created=True, default=None, on_delete=django.db.models.deletion.CASCADE,
                                       parent_link=True, primary_key=True, serialize=False,
                                       to='questionnaire.AbstractQuestionnaireQuestion'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='yesnoquestionnairequestion',
            name='abstractquestionnairequestion_ptr',
            field=models.OneToOneField(auto_created=True, default=None, on_delete=django.db.models.deletion.CASCADE,
                                       parent_link=True, primary_key=True, serialize=False,
                                       to='questionnaire.AbstractQuestionnaireQuestion'),
            preserve_default=False,
        ),

        migrations.RemoveField(
            model_name='choicequestionnairequestion',
            name='help_text',
        ),
        migrations.RemoveField(
            model_name='choicequestionnairequestion',
            name='is_required',
        ),
        migrations.RemoveField(
            model_name='choicequestionnairequestion',
            name='order',
        ),
        migrations.RemoveField(
            model_name='choicequestionnairequestion',
            name='questionnaire',
        ),
        migrations.RemoveField(
            model_name='choicequestionnairequestion',
            name='short_name',
        ),
        migrations.RemoveField(
            model_name='choicequestionnairequestion',
            name='text',
        ),
        migrations.RemoveField(
            model_name='datequestionnairequestion',
            name='help_text',
        ),
        migrations.RemoveField(
            model_name='datequestionnairequestion',
            name='is_required',
        ),
        migrations.RemoveField(
            model_name='datequestionnairequestion',
            name='order',
        ),
        migrations.RemoveField(
            model_name='datequestionnairequestion',
            name='questionnaire',
        ),
        migrations.RemoveField(
            model_name='datequestionnairequestion',
            name='short_name',
        ),
        migrations.RemoveField(
            model_name='datequestionnairequestion',
            name='text',
        ),
        migrations.RemoveField(
            model_name='textquestionnairequestion',
            name='help_text',
        ),
        migrations.RemoveField(
            model_name='textquestionnairequestion',
            name='is_required',
        ),
        migrations.RemoveField(
            model_name='textquestionnairequestion',
            name='order',
        ),
        migrations.RemoveField(
            model_name='textquestionnairequestion',
            name='questionnaire',
        ),
        migrations.RemoveField(
            model_name='textquestionnairequestion',
            name='short_name',
        ),
        migrations.RemoveField(
            model_name='textquestionnairequestion',
            name='text',
        ),
        migrations.RemoveField(
            model_name='yesnoquestionnairequestion',
            name='help_text',
        ),
        migrations.RemoveField(
            model_name='yesnoquestionnairequestion',
            name='is_required',
        ),
        migrations.RemoveField(
            model_name='yesnoquestionnairequestion',
            name='order',
        ),
        migrations.RemoveField(
            model_name='yesnoquestionnairequestion',
            name='questionnaire',
        ),
        migrations.RemoveField(
            model_name='yesnoquestionnairequestion',
            name='short_name',
        ),
        migrations.RemoveField(
            model_name='yesnoquestionnairequestion',
            name='text',
        ),
        migrations.AlterUniqueTogether(
            name='abstractquestionnaireblock',
            unique_together=set([('short_name', 'questionnaire'), ('questionnaire', 'order')]),
        ),
        # Restore foreign key for variants
        migrations.AddField(
            model_name='choicequestionnairequestionvariant',
            name='question',
            field=models.ForeignKey(on_delete=models.CASCADE, to='questionnaire.ChoiceQuestionnaireQuestion', related_name='variants'),
        ),

        RunPython(restore_questions, backwards),
    ]

